## ASP.NET Core 整合 PowerShell Hosting Environment

* ASP.NET Core v3.1+ 的專案透過 [`Microsoft.PowerShell.SDK` nuget 套件](http://www.nuget.org/packages/Microsoft.PowerShell.SDK)整合 [PowerShell Hosting runtime環境](http://learn.microsoft.com/powershell/scripting/dev-cross-plat/choosing-the-right-nuget-package#microsoftpowershellsdk)，使 C# 應用以 [ PowerShell C# API 執行 PowerShell script 或 PowerShell Cmdlet 指令](https://learn.microsoft.com/powershell/scripting/developer/hosting/adding-and-invoking-commands)。


## ASP.NET Core Minimal API 整合執行 PowerShell Script 範例

### ***Demo***

[範例程式碼 GitHub](http://github.com/windperson/MinimalApiCallPwshDemo)

* 此範例程式為一個檢查執行環境中兩個目錄是否有同樣檔案的 Web API，透過 PowerShell script 來執行真正檔案比對的工作。
* 如何在 .NET Core / .NET 5+ 專案使用 PowerShell Hosting Environment API 指派輸入參數給 PowerShell script 執行，並取得執行結果。
* [xUnit](https://xunit.net/) 測試專案 test method 間接執行用 Pester 撰寫的 PowerShell test case 驗證 script 行為。

## {.smaller .scrollable}

此 PowerShell script 在先前的 [Pester test case 範例專案中提供](https://github.com/windperson/DemoPester/blob/main/Demo1to1MappingTestModule/Production/ProductFeatures/SysAdminUtil/DuplicateFilesFinder.psm1)並且已有[驗證行為的測試案例](https://github.com/windperson/DemoPester/blob/main/Demo1to1MappingTestModule/Production_test/ProductFeatures/SysAdminUtil/DuplicateFilesFinder.Tests.ps1)。

![]({{< meta part4_img_prefix >}}pics/cli_run_Duplicate_File_Finder.png){height=100% fig-align="center"}

使用 PowerShell 來撰寫取得所有有特定副檔名的檔案邏輯，比單純使用 C# 簡單:

```PowerShell{.ps1 filename="src\DemoWebApi\PwshScripts\DuplicateFilesFinder.psm1" code-line-numbers="7"}
function Get-Files {
    [SuppressMessage('PSUseSingularNouns', '')]
    param (
        [string]$Path,
        [string]$Extension
    )
    return Get-ChildItem -Path $Path -Recurse -File -Filter "*.$Extension"
}
```

也可用PowerShell 的 [`Get-FileHash` Cmdlet](http://learn.microsoft.com/powershell/module/microsoft.powershell.utility/get-filehash) 取得檔案的 Hash 值來快速判斷檔案內容是否相同:

```PowerShell{.ps1 filename="src\DemoWebApi\PwshScripts\DuplicateFilesFinder.psm1" code-line-numbers="8"}
function Get-FileContentHash {
    [SuppressMessage('PSAvoidUsingBrokenHashAlgorithms', '', 
        Justification = 'MD5 is just used for file hash comparison')]
    param (
        [Parameter(Mandatory = $true)]
        [System.IO.FileInfo]$FilePath
    )
    return Get-FileHash -Algorithm MD5 -Path $FilePath # -SilentlyContinue
}
```

## {.smaller .scrollable}

在 ASP.NET Core Minimal API 中使用 PowerShell Hosting Environment 來執行 PowerShell script/指令，需要先建立相關的 [PowerShell](http://learn.microsoft.com/dotnet/api/system.management.automation.powershell), [Runspace](http://learn.microsoft.com/dotnet/api/system.management.automation.runspaces.runspace) 等 API 物件，以及使用 `.AddScript()`/`.AddCommand()`/`.AddParameter()` 等 chainable fluent API 的方式來設定 PowerShell script 的執行環境:

```csharp{.cs filename="src\DemoWebApi\Services\DuplicateFileFinderInvokeService.cs" code-line-numbers="false"}
public DuplicateFileFinderInvokeService(ILogger<DuplicateFileFinderInvokeService> logger)
{
    _runspacePool = RunspaceFactory.CreateRunspacePool();                                 // <1>
    _runspacePool.Open();                                                                 // <1>
    _logger = logger;
}

public async Task<IList<DuplicateFileResult>> RunScriptAsync(ApiInputDto funcInput,
    CancellationToken cancellationToken)
{
    using var ps = PowerShell.Create();
    ps.RunspacePool = _runspacePool;
    cancellationToken.Register(() =>
    {
        if (ps.InvocationStateInfo.State == PSInvocationState.Running)                   // <2>
        {                                                                                // <2> 
            ps.Stop();                                                                   // <2> 
        }                                                                                // <2>
    });

    /* ... */

    try
    {
        ps.AddScript("Import-Module ./PwshScripts/DuplicateFilesFinder.psm1 -Verbose")   // <3>
            .AddStatement();                                                             // <3>
        ps.AddCommand("Get-DuplicateFile")                                               // <3>
            .AddParameter("SourcePath", funcInput.SourceFolder)                          // <3>
            .AddParameter("ComparePath", funcInput.CompareFolder);                       // <3>
        if (!string.IsNullOrEmpty(funcInput.CompareType))                                // <3>
        {                                                                                // <3>    
            ps.AddParameter("CompareType", funcInput.CompareType);                       // <3>
        }                                                                                // <3>
        /* run above arranged commands via ps.Invoke(...) or ps.InvokeAsync(...) */
    }
    catch (Exception ex)
    {
        // handle exception
    }
}
```
1. 使用 [`RunspacePool`](http://learn.microsoft.com/dotnet/api/system.management.automation.runspaces.runspacepool) 來管理 [PowerShell 的 Runspace 執行環境](http://learn.microsoft.com/powershell/scripting/developer/hosting/creating-runspaces)，記得要呼叫 [`.Open()`](https://learn.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.runspace.open?view=powershellsdk-7.4.0) 後才能後續在 PowerShell 物件上執行 [`.Invoke()`](http://learn.microsoft.com/dotnet/api/system.management.automation.powershell.invoke)/[`.InvokeAsync()`](http://learn.microsoft.com/dotnet/api/system.management.automation.powershell.invokeasync) 實際跑 PowerShell 程式。
2. 設定當 CancellationToken 觸發時，停止目前 PowerShell runtime 的執行。
3. [`.AddScript()`](http://learn.microsoft.com/dotnet/api/system.management.automation.powershell.addscript) 用來載入 PowerShell script 檔案，[`.AddStatement()`](http://learn.microsoft.com/dotnet/api/system.management.automation.powershell.addstatement)同等於 PowerShell script 檔案裡換行，[`.AddCommand()`](http://learn.microsoft.com/dotnet/api/system.management.automation.powershell.addcommand) 表示執行 PowerShell function/Cmdlet，[`.AddParameter()`](http://learn.microsoft.com/dotnet/api/system.management.automation.powershell.addcommand)/[`.AddParameters()`](http://learn.microsoft.com/dotnet/api/system.management.automation.powershell.addparameters) 用來設定前面預計要執行的 PowerShell function/Cmdlet 的輸入參數值。


## {.smaller .scrollable}

原本在 PowrShell script 裡用的是 [PowerShell 定義自訂 Class 類別](http://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_classes)，因此在執行完畢回傳的結果值物件直接使用 [**`dynamic`** keyword](https://learn.microsoft.com/dotnet/csharp/advanced-topics/interop/using-type-dynamic) 寫法簡化取得 FilePath1 & FilePath2 屬性值程式碼。

```csharp{.cs filename="src\DemoWebApi\Services\DuplicateFileFinderInvokeService.cs" code-line-numbers="false"}
var result =
    ps.Invoke(input: null, settings: psInvocationSettings)
        .FirstOrDefault()?.BaseObject as object[];                        // <1>

var duplicateFileResults = new List<DuplicateFileResult>(result.Length);
// use dynamic to make simpler coding style to avoid reflection
foreach (dynamic duplicateFileInfo in result)                             // <2>
{
    var duplicateFileResult = new DuplicateFileResult
    {
        SourceFilePath = duplicateFileInfo.FilePath1.ToString(),          // <3>
        CompareFilePath = duplicateFileInfo.FilePath2.ToString()          // <3>
    };
    duplicateFileResults.Add(duplicateFileResult);
}

return duplicateFileResults;
```
1. 由於原本 PowerShell script function 的回傳值是單個物件陣列，所以取得回傳值順便先轉型成 `object[]` 陣列。
2. 使用 `dynamic` 關鍵字來簡化原本 PowerShell 程式碼中定義的自訂 class 型別。
3. 就可以直接使用物件的屬性值（C#編譯器不檢查，如果寫錯就會有 runtime exception）。

![]({{< meta part4_img_prefix >}}pics/pwsh_defined_class_return_object.png){height=100% fig-align="center"}

## 執行 Pester 測試的 xUnit 程式碼 {.smaller .scrollable}

在 xUnit Test method 中呼叫 PowerShell runtime 執行 Pester 測試案例，使用 Pester 框架提供的 [`Invoke-Pester` Cmdlet 的 **`-PassThru`** 命令列參數](https://pester.dev/docs/commands/Invoke-Pester#-passthru)，可使 Pester 將執行測試結果傳出，再於 C# 中驗證測試結果是否符合預期:

```csharp{.cs filename="tests\DemoWebApi.Tests\PwshModuleTest.cs" code-line-numbers="false"}
[Fact]
public void TestDuplicateFileFinderPwshFunction()
{
    // Arrange
    using var runspace = RunspaceFactory.CreateRunspace();
    runspace.Open();
    using var ps = PowerShell.Create(runspace);
    var psInvocationSettings = new PSInvocationSettings
    {
        AddToHistory = false,
        ErrorActionPreference = ActionPreference.Stop,
    };
    #region TestScript
    const string testScript = 
    """
    $tempModulePath = $env:TEMP + "\PwshModule$((Get-Date).Ticks)"                            // <1>
    if(-not (Test-Path $tempModulePath)) {                                                    // <1>
        New-Item -Path $tempModulePath -ItemType Directory -ErrorAction Stop | Out-Null       // <1>
    }                                                                                         // <1>
    else {                                                                                    // <1>
        Remove-Item -Path $tempModulePath -Recurse -Force -ErrorAction Stop | Out-Null        // <1>
        New-Item -Path $tempModulePath -ItemType Directory -ErrorAction Stop | Out-Null       // <1>
    }                                                                                         // <1>
    Save-Module -Name Pester -Path $tempModulePath -ErrorAction Stop                          // <2>
    Import-Module $tempModulePath\Pester -Force -ErrorAction Stop                             // <2>

    $currentDir = [System.IO.Directory]::GetCurrentDirectory()                                // <3>
    $TestScriptPath = "$currentDir\..\..\..\PwshScripts\DuplicateFilesFinder.Tests.ps1"       // <3>
    if(-not (Test-Path $TestScriptPath)) {                                                    // <3>
        throw "Test script not found at $TestScriptPath"                                      // <3>
    }                                                                                         // <3>
    $result = Invoke-Pester -Path $TestScriptPath -PassThru                                   // <4>
    return $result                                                                            // <4>
    """;
    #endregion
    ps.AddScript(testScript);

    // Act
    var psResult = ps.Invoke(input: null, settings: psInvocationSettings).FirstOrDefault();

    // Assert
    Assert.NotNull(psResult);
    var testResult = psResult.Properties["Result"].Value as string;                           // <5>
    var totalCount = psResult.Properties["TotalCount"].Value as int?;                         // <5>
    var passedCount = psResult.Properties["PassedCount"].Value as int?;                       // <5>
    var failedCount = psResult.Properties["FailedCount"].Value as int?;                       // <5>
    Assert.NotNull(testResult);
    Assert.NotNull(totalCount);
    Assert.NotNull(passedCount);
    Assert.NotNull(failedCount);
    Assert.Equal("Passed", testResult);
    Assert.True(passedCount > 0);
    Assert.Equal(totalCount, passedCount);
    Assert.Equal(0, failedCount);
}
```
1. 建立暫存目錄來在稍後步驟用來放最新版 Pester PowerShell module。
2. 使用 PowerShellGet 的 `Save-Module` 命令將最新版 Pester 從 PowerShell Gallery 下載至暫存目錄，然後用 `Import-Module` 載入該版本的 Pester 模組。(參考[官方手動安裝說明文件](https://pester.dev/docs/introduction/installation#installing-manually))
3. 取得目前執行測試程式的目錄，並且設定要執行的 Pester 測試案例 script 檔案路徑。
4. 執行 Pester 測試案例 script 檔案，並將測試結果回傳給 C# 程式碼。
5. 由於 Pester 測試結果回傳的是 PowerShell [PSCustomObject](http://learn.microsoft.com/powershell/scripting/learn/deep-dives/everything-about-pscustomobject) 型態物件，所以透過 `Properties` 屬性來取得各個測試結果的屬性值。

![]({{< meta part4_img_prefix >}}pics/Invoke-Pester_test_result_object.png){height=100% fig-align="center"}

如此我們就可以將 PowerShell 的 Pester 單元測試整合至 xUnit 測試專案中，讓 C＃ code & PowerShell script 一起執行測試驗證程式邏輯。👍
