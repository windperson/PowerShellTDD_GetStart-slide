## Pester - PowerShell Test Framework

* [Pester](http://pester.dev) 是一個 PowerShell 的全家桶測試框架，可以用來撰寫測試案例、執行測試案例、產生測試報告。
* 提供 [Assertion Syntax](http://pester.dev/docs/assertions/) / [Mock](http://pester.dev/docs/usage/mocking) / [Test Runner](http://pester.dev/docs/commands/Invoke-Pester) / [Code Coverage](http://pester.dev/docs/usage/code-coverage) 等進行測試驅動開發時需要的功能。
* 提供測試用虛擬磁碟 [`TestDrive:`](http://pester.dev/docs/usage/testdrive) /<br/>虛擬 Windows Registry [`TestRegistry:`](http://pester.dev/docs/usage/testregistry) 的執行環境隔離功能，方便進行測試程式碼撰寫。
* 跟 VSCode PowerShell Extension 整合，可在 [VSCode 的 Code Lens中直接執行/除錯特定的單一 Pester 測試案例](http://pester.dev/docs/usage/vscode)。
* PowerShell 官方也使用此測試框架來寫測試案例。<br/><https://github.com/PowerShell/PowerShell/blob/master/docs/testing-guidelines/WritingPesterTests.md>

## Pester 撰寫測試案例程式碼時的重點 {.scrollable}

* 以 `Describe` 來描述測試案例的主題，以 `Context` 來描述測試案例的子主題，以 `It` 來描述測試案例的斷言(Test Case)。
* 雖然 Pester 自己預設行為是去搜尋執行目錄下以 `.Tests.ps1` 檔案名結尾的 PowerShell Script 檔案作為測試案例程式碼執行，但是得自行處理待測試 PowerShell Script 檔案( .ps1/.psm1 )的模組載入問題。
* 透過 [`Mock`](http://pester.dev/docs/usage/mocking) 來模擬外部依賴的PowerShell函式呼叫/原生應用程式執行，以達到隔離測試的目的：
    * `Mock` 會在測試案例執行前將原本的函式/程式替換成 Mock 所定義的行為，測試案例執行完畢後再還原。
      * Pester 的 Mock 功能在 PowerShell v7+ 支援較好，建議測試案例的 script 程式碼儘量用 PowerShell v7+ 的環境來執行。
      * Pester 底層使用 [PowerShell Alias 功能](http://learn.microsoft.com/powershell/scripting/learn/shell/using-aliases)實現 Mock 命令實作。
      * 當宣告 Mock 時，**要蓋掉的 PowerShell Cmdlet/函式命令 必須已存在於待測試程式碼的 Module Scope 內，否則 Pester 會無法蓋掉，轉而拋出執行錯誤。**
      * 宣告的 Mock 在使用命令的程式碼所在的 Module [作用域(Module Scope)](http://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_scopes) 內有效，而非全域有效。
    * `Mock` 會記錄 Mock 物件的呼叫次數、參數、回傳值等資訊，方便撰寫測試案例時檢查。
    * `Mock` 無法蓋掉使用 binary cmdlet 載入的 C# Cmdlet 函式，因為同名模組中的函式呼叫優先順序 ***C# >>> PowerShell***。
* 透過 `TestDrive:` 來建立虛擬磁碟空間，以達到隔離測試的目的。
* 透過 `TestRegistry:` 來建立虛擬 Windows Registry 空間，以達到隔離測試的目的。
* 必要時可建立 Customer Pester Assertion 以便簡化驗證測試結果的程式碼區塊的撰寫。

## Pester 為既有程式撰寫測試案例程式碼範例

### ***Demo***

[範例程式碼 GitHub](http://github.com/windperson/DemoPester)

* 系統性的制式 Data-Driven 測試案例架構來驗證各模組函式的輸入參數名稱、型別、回傳值。
* 由於 PowerShell 對於 .ps1 & .psm1 模組載入機制的不同，會造成某些待測模組的程式碼寫法，會不好撰寫測試程式碼。
  * `InModuleScope` 以便在待測模組載入時的環境變數設定自定義邏輯(塞入固定參數/Mock/Assertion程式碼)。
  * 藉由先宣告一些 Dummy function 來『先佔位』以便順利進行宣告 MOck 語法，然後再載入模組以便進行測試。
* Pester Custom Assertion 的撰寫及註冊使用。

## 系統性的制式 Data-Driven 測試案例架構來驗證各模組函式的輸入參數名稱、型別、回傳值。 {.small .scrollable}

雖然 PowerShell 是 Strongly Typed Language，但是在專案寫大寫複雜時，仍然需要一些驗證機制來確定呼叫的函式的輸入參數名稱、型別、回傳值型別是否正確。

於是使用 [`Get-Command`](http://learn.microsoft.com/powershell/module/microsoft.powershell.core/get-command) Cmdlet 來取得函式的參數資訊，然後透過 Pester 的測試案例來驗證之：
```powershell {.ps1 filename="Demo1to1MappingTestModule\Production_test\VerifyPsDefApi.ps1" code-line-numbers="false" }
function VerifyApiType() {
    <#
    .SYNOPSIS
    Verify if the PowerShell executable command exists in the current session and is correct type.
    #>
    param(
        [string] $Name,
        [System.Management.Automation.CommandTypes] $CommandType = [System.Management.Automation.CommandTypes]::Function
    )

    Process {
        $targetExists = Get-Command -Name $Name -CommandType $CommandType -ErrorAction SilentlyContinue
        $targetExists | Should -Not -BeNullOrEmpty
        return $targetExists
    }
}
```


## Pester Custom Assertion {.small .scrollable}

Pester 沒有提供浮點數值精確度比較的 Assertion Cmdlet, 所以就自己動手寫一個：

```powershell {.ps1 filename="Demo1to1MappingTestModule\Production_test\ProductFeatures\MathFeatureModule\MathFeature.Tests.ps1" code-line-numbers="false" }
function Should-BeEqualWithPrecision(                                                                          # <1>
  [double] $ActualValue, [double] $ExpectValue,                                                                # <2>
  [uint] $Precision,                                                                                           # <2>
  [switch] $Negate,                                                                                            # <2>
  [string] $Because                                                                                            # <2>
) {
    $pass = [math]::Round($ActualValue, $Precision) -eq [math]::Round($ExpectValue, $Precision)                # <3>
    if ($Negate) {                                                                                             # <4>
        $pass = -not $pass                                                                                     # <4>
    }                                                                                                          # <4>

    if (-not $pass) {                                                                                          # <5>
        if ($Negate) {                                                                                         # <5> 
            $failureMessage =                                                                                  # <5>
              "Expected '$ActualValue' to not be equal to $ExpectValue$(if($Because) { " because $Because"})." # <5>
        }                                                                                                      # <5>
        else {                                                                                                 # <5> 
            $failureMessage =                                                                                  # <5>
              "Expected '$ActualValue' to be equal to $ExpectValue$(if($Because) { " because $Because"})."     # <5>
        }                                                                                                      # <5>
    }                                                                                                          # <5>

    return [pscustomobject]@{                                                                                  # <6>
        Succeeded      = $pass                                                                                 # <6>
        FailureMessage = $failureMessage                                                                       # <6>
    }                                                                                                          # <6>
}
```
1. Pester Custom Assertion 就是一個自己寫的 [PowerShell Simple Function](http://learn.microsoft.com/powershell/scripting/learn/ps101/09-functions#a-simple-function)，`Verb-Noun` 的命名風格是 **Verb** 為 `Should` 不可改動，**Noun** `BeEqualWithPrecision` 為我們自己定義的名稱。
2. 輸入和輸出的格式區符合 Pester 的規範：`$ActualValue` 是實際值，`$Negate` 是設定是否反轉布林邏輯，`$Because` 是 Assertion 失敗時的訊息，這三個輸入參數名稱一定要正確；而`$ExpectValue` 預期值和設定浮點數值精確度的 `$Precision` 是我們自己定義的額外輸入參數，可於撰寫測試程式碼的 Assertion statements 時多指定在程式碼中。
3. 這個 Custom Assertion 的實作是透過將兩個浮點數值四捨五入到指定精確度後再比較是否相等，以達到比較浮點數值的精確度比較。
4. 假如有指定 `$Negate` 參數，則反轉判斷結果的布林值。
5. 為不同的 Assertion 結果設定不同的錯誤訊息。
6. 最後回傳一個 [PSCustomObject](http://learn.microsoft.com/powershell/scripting/learn/deep-dives/everything-about-pscustomobject) 物件，其中包含了 Assertion 的結果布林值(`Succeeded`)和錯誤訊息(`FailureMessage`)。

然後在測試案例程式碼中先呼叫 [`Add-ShouldOperator`](https://pester.dev/docs/commands/Add-ShouldOperator)註冊:
```powershell {.ps1 filename="Demo1to1MappingTestModule/Production_test/ProductFeatures/MathFeatureModule/MathFeature.Tests.ps1" }
Add-ShouldOperator -Name BeEqualWithPrecision -Test ${Function:Should-BeEqualWithPrecision}
```
就可以在撰寫測試案例程式碼時使用 `Should -BeEqualWithPrecision` 這個 Custom Assertion 了：
```powershell {.ps1 filename="Demo1to1MappingTestModule/Production_test/ProductFeatures/MathFeatureModule/MathFeature.Tests.ps1" }
$actual | Should -BeEqualWithPrecision -ExpectValue $expect -Precision 2
```
